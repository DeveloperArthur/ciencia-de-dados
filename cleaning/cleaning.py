# -*- coding: utf-8 -*-
"""Cleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xeUsBXNHTlQ2NW_IZvohWejORIDLbaiF
"""

import numpy as np
import pandas as pd
from IPython.display import display, HTML
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats


dfPoints = pd.read_csv("df_points.txt", delimiter="\t")



dfTrainData  = dfPoints.loc[0:8999,['x','y','z']]
dfTrainLabel = dfPoints.loc[0:8999,['label']]
dfTestData   = dfPoints.loc[9000:,['x','y','z']]
dfTestExpect = dfPoints.loc[9000:,['label']]



print('======================= Describe each one dataset for testing and training  (BEFORE CLEANING) ===============================')

print('Train data statistics describe ', dfTrainData.describe())

stat1B = dfTrainData.describe()


print('===================================================================================')

print('Test data statistics describe ', dfTestData.describe())

stat2B = dfTestData.describe()
print('===================================================================================')



#  Getting shuffled dataset in order to avoid a timed or positional dependent dataset.

dfPointsT = dfPoints.sample(frac=1).reset_index(drop=True)

# checking outliers by visual boxplot from seaborn

sns.boxplot(x=dfPointsT['x'])
plt.savefig('grafico01.png', dpi=None, facecolor='w', edgecolor='b',
        orientation='portrait', papertype=None, format=None,
        transparent=False, bbox_inches=None, pad_inches=0.1,
        frameon=None)
plt.show()

sns.boxplot(x=dfPointsT['y'])
plt.savefig('grafico02.png', dpi=None, facecolor='w', edgecolor='b',
        orientation='portrait', papertype=None, format=None,
        transparent=False, bbox_inches=None, pad_inches=0.1,
        frameon=None)
plt.show()
sns.boxplot(x=dfPointsT['z'])
plt.savefig('grafico03.png', dpi=None, facecolor='w', edgecolor='b',
        orientation='portrait', papertype=None, format=None,
        transparent=False, bbox_inches=None, pad_inches=0.1,
        frameon=None)
plt.show()

# checking outliers by zscore method

df= dfPointsT[(np.abs(stats.zscore(dfPointsT)) < 2).all(axis=1)]
df= dfPointsT


dfTrainData  = df.loc[0:8999,['x','y','z']]
dfTrainLabel = df.loc[0:8999,['label']]
dfTestData   = df.loc[9000:,['x','y','z']]
dfTestExpect = df.loc[9000:,['label']]



print('Train data statistics describe ', dfTrainData.describe())

stat1A = dfTrainData.describe()

print('===================================================================================')

print('Test data statistics describe ', dfTestData.describe())

stat2A = dfTestData.describe()

print('===================================================================================')

print('========================== stats Training vs. Testing  BEFORE =====================')

compareB = stat1B - stat2B
display(compareB) 

print('========================== stats Training vs. Testing  AFTER =====================')

compareA = stat1A - stat2A
display(compareA)

import numpy as np
import pandas as pd
from IPython.display import display, HTML
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats


dfPoints = pd.read_csv("df_points.txt", delimiter="\t")

dfPoints[(dfPoints['label']==0)].count()
# dfPoints[(dfPoints['label']==1.0)].count()